#!/usr/bin/env python3
"""
Script ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u cho ·ª©ng d·ª•ng Eat Today
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.infrastructure.database.base import db
from src.infrastructure.model import User, Recipe, Ingredient, MealPlan, Meal, MealRecipe
from src.app import create_app
from datetime import datetime, date, timedelta
import hashlib

def create_sample_data():
    """T·∫°o d·ªØ li·ªáu m·∫´u"""
    app = create_app()
    
    with app.app_context():
        # X√≥a d·ªØ li·ªáu c≈©
        db.drop_all()
        db.create_all()
        
        # T·∫°o users
        users = [
            User(
                username="admin",
                email="admin@eattoday.com",
                password_hash=hashlib.sha256("admin123".encode()).hexdigest(),
                role="admin",
                family_size=1
            ),
            User(
                username="nutritionist1",
                email="nutritionist@eattoday.com",
                password_hash=hashlib.sha256("nutrition123".encode()).hexdigest(),
                role="nutritionist",
                family_size=1
            ),
            User(
                username="planner1",
                email="planner@eattoday.com",
                password_hash=hashlib.sha256("planner123".encode()).hexdigest(),
                role="planner",
                family_size=1
            ),
            User(
                username="user1",
                email="user1@eattoday.com",
                password_hash=hashlib.sha256("user123".encode()).hexdigest(),
                role="user",
                family_size=4,
                dietary_preferences=["vegetarian"],
                budget=1000000
            ),
            User(
                username="user2",
                email="user2@eattoday.com",
                password_hash=hashlib.sha256("user123".encode()).hexdigest(),
                role="user",
                family_size=2,
                dietary_preferences=["low_carb"],
                budget=800000
            )
        ]
        
        for user in users:
            db.session.add(user)
        
        db.session.commit()
        print("‚úÖ Created users")
        
        # T·∫°o ingredients
        ingredients = [
            Ingredient(
                name="G·∫°o",
                category="grain",
                unit="kg",
                nutrition_per_100g={
                    "calories": 130,
                    "protein": 2.7,
                    "carbs": 28,
                    "fat": 0.3,
                    "fiber": 0.4
                }
            ),
            Ingredient(
                name="Th·ªãt b√≤",
                category="meat",
                unit="kg",
                nutrition_per_100g={
                    "calories": 250,
                    "protein": 26,
                    "carbs": 0,
                    "fat": 15,
                    "fiber": 0
                }
            ),
            Ingredient(
                name="C√† chua",
                category="vegetable",
                unit="kg",
                nutrition_per_100g={
                    "calories": 18,
                    "protein": 0.9,
                    "carbs": 3.9,
                    "fat": 0.2,
                    "fiber": 1.2
                }
            ),
            Ingredient(
                name="H√†nh t√¢y",
                category="vegetable",
                unit="kg",
                nutrition_per_100g={
                    "calories": 40,
                    "protein": 1.1,
                    "carbs": 9.3,
                    "fat": 0.1,
                    "fiber": 1.7
                }
            ),
            Ingredient(
                name="Tr·ª©ng",
                category="dairy",
                unit="piece",
                nutrition_per_100g={
                    "calories": 155,
                    "protein": 13,
                    "carbs": 1.1,
                    "fat": 11,
                    "fiber": 0
                }
            ),
            Ingredient(
                name="S·ªØa",
                category="dairy",
                unit="ml",
                nutrition_per_100g={
                    "calories": 42,
                    "protein": 3.4,
                    "carbs": 5,
                    "fat": 1,
                    "fiber": 0
                }
            )
        ]
        
        for ingredient in ingredients:
            db.session.add(ingredient)
        
        db.session.commit()
        print("‚úÖ Created ingredients")
        
        # T·∫°o recipes
        recipes = [
            Recipe(
                name="C∆°m rang th·∫≠p c·∫©m",
                description="M√≥n c∆°m rang ngon v·ªõi nhi·ªÅu nguy√™n li·ªáu",
                ingredients=[
                    {"name": "G·∫°o", "quantity": 200, "unit": "g"},
                    {"name": "Th·ªãt b√≤", "quantity": 100, "unit": "g"},
                    {"name": "C√† chua", "quantity": 50, "unit": "g"},
                    {"name": "H√†nh t√¢y", "quantity": 30, "unit": "g"},
                    {"name": "Tr·ª©ng", "quantity": 1, "unit": "piece"}
                ],
                instructions="1. N·∫•u c∆°m ch√≠n\n2. X√†o th·ªãt b√≤\n3. Th√™m c√† chua v√† h√†nh t√¢y\n4. Cho c∆°m v√†o x√†o\n5. ƒê·∫≠p tr·ª©ng v√†o",
                prep_time=15,
                cook_time=20,
                servings=2,
                nutrition_info={
                    "calories": 450,
                    "protein": 25,
                    "carbs": 45,
                    "fat": 18,
                    "fiber": 2
                },
                created_by=1,
                is_public=True
            ),
            Recipe(
                name="Canh chua c√°",
                description="M√≥n canh chua truy·ªÅn th·ªëng Vi·ªát Nam",
                ingredients=[
                    {"name": "C√°", "quantity": 300, "unit": "g"},
                    {"name": "C√† chua", "quantity": 100, "unit": "g"},
                    {"name": "D·ª©a", "quantity": 50, "unit": "g"},
                    {"name": "H√†nh t√¢y", "quantity": 20, "unit": "g"}
                ],
                instructions="1. L√†m s·∫°ch c√°\n2. N·∫•u n∆∞·ªõc d√πng\n3. Th√™m c√† chua v√† d·ª©a\n4. Cho c√° v√†o n·∫•u ch√≠n",
                prep_time=20,
                cook_time=25,
                servings=3,
                nutrition_info={
                    "calories": 180,
                    "protein": 22,
                    "carbs": 8,
                    "fat": 6,
                    "fiber": 1.5
                },
                created_by=1,
                is_public=True
            ),
            Recipe(
                name="Tr·ª©ng chi√™n",
                description="M√≥n tr·ª©ng chi√™n ƒë∆°n gi·∫£n",
                ingredients=[
                    {"name": "Tr·ª©ng", "quantity": 3, "unit": "piece"},
                    {"name": "H√†nh t√¢y", "quantity": 20, "unit": "g"}
                ],
                instructions="1. ƒê·∫≠p tr·ª©ng v√†o b√°t\n2. Th√™m h√†nh t√¢y th√°i nh·ªè\n3. ƒê√°nh ƒë·ªÅu\n4. Chi√™n tr√™n ch·∫£o",
                prep_time=5,
                cook_time=10,
                servings=2,
                nutrition_info={
                    "calories": 200,
                    "protein": 15,
                    "carbs": 2,
                    "fat": 15,
                    "fiber": 0.5
                },
                created_by=1,
                is_public=True
            )
        ]
        
        for recipe in recipes:
            db.session.add(recipe)
        
        db.session.commit()
        print("‚úÖ Created recipes")
        
        # T·∫°o meal plan m·∫´u
        user1 = User.query.filter_by(username="user1").first()
        if user1:
            meal_plan = MealPlan(
                user_id=user1.id,
                plan_date=date.today(),
                status="draft",
                total_cost=50000
            )
            db.session.add(meal_plan)
            db.session.flush()
            
            # T·∫°o c√°c b·ªØa ƒÉn
            breakfast = Meal(
                meal_plan_id=meal_plan.id,
                meal_type="breakfast",
                notes="B·ªØa s√°ng nh·∫π"
            )
            lunch = Meal(
                meal_plan_id=meal_plan.id,
                meal_type="lunch",
                notes="B·ªØa tr∆∞a ch√≠nh"
            )
            dinner = Meal(
                meal_plan_id=meal_plan.id,
                meal_type="dinner",
                notes="B·ªØa t·ªëi gia ƒë√¨nh"
            )
            
            db.session.add_all([breakfast, lunch, dinner])
            db.session.flush()
            
            # Th√™m c√¥ng th·ª©c v√†o b·ªØa ƒÉn
            c∆°m_rang = Recipe.query.filter_by(name="C∆°m rang th·∫≠p c·∫©m").first()
            canh_chua = Recipe.query.filter_by(name="Canh chua c√°").first()
            tr·ª©ng_chi√™n = Recipe.query.filter_by(name="Tr·ª©ng chi√™n").first()
            
            if c∆°m_rang and canh_chua and tr·ª©ng_chi√™n:
                meal_recipes = [
                    MealRecipe(meal_id=breakfast.id, recipe_id=tr·ª©ng_chi√™n.id, servings=1),
                    MealRecipe(meal_id=lunch.id, recipe_id=c∆°m_rang.id, servings=2),
                    MealRecipe(meal_id=dinner.id, recipe_id=canh_chua.id, servings=3)
                ]
                
                for mr in meal_recipes:
                    db.session.add(mr)
        
        db.session.commit()
        print("‚úÖ Created sample meal plan")
        
        print("\nüéâ Sample data created successfully!")
        print("\nüìã Test accounts:")
        print("Admin: admin / admin123")
        print("Nutritionist: nutritionist1 / nutrition123")
        print("Planner: planner1 / planner123")
        print("User: user1 / user123")
        print("User: user2 / user123")

if __name__ == "__main__":
    create_sample_data()
